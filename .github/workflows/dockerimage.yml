name: Build and Deploy

on: [push]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2    
    - uses: webfactory/ssh-agent@v0.2.0
      with:
        ssh-private-key: ${{ secrets.SECRET_PRIVATE_DEPLOY_KEY }}
    
    - name: Build all core libs
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_ID }}/libcore -f ./native/dockerfile-lib --build-arg LIB_NAME=core ./native      
        docker build -t ${{ secrets.DOCKER_HUB_ID }}/libdatabase -f ./native/dockerfile-lib --build-arg LIB_NAME=database ./native
    - name: Build asset_daemon
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_ID }}/asset_daemon -f ./native/dockerfile-assetdaemon .      
    - name: Build NGINX
      run: docker build -t ${{ secrets.DOCKER_HUB_ID }}/nginx ./nginx      
    - name: Build restful-api
      run: docker build -t ${{ secrets.DOCKER_HUB_ID }}/restful-api ./restful-api
    - name: Build portal
      run: docker build -t ${{ secrets.DOCKER_HUB_ID }}/portal ./portal
    - name: Build rsinitiate
      run: docker build -t ${{ secrets.DOCKER_HUB_ID }}/mongo-rsinitiate ./mongo

    - name: Docker hub login
      run: echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_ID }} --password-stdin
              
    - name: Docker Push all core-libs
      run: |
        docker push ${{ secrets.DOCKER_HUB_ID }}/libcore
        docker push ${{ secrets.DOCKER_HUB_ID }}/libdatabase
    - name: Docker Push asset_daemon
      run: |
        docker push ${{ secrets.DOCKER_HUB_ID }}/asset_daemon
    - name: Docker Push NGINX
      run: docker push ${{ secrets.DOCKER_HUB_ID }}/nginx
    - name: Docker Push restful-api
      run: docker push ${{ secrets.DOCKER_HUB_ID }}/restful-api
    - name: Docker Push portal
      run: docker push ${{ secrets.DOCKER_HUB_ID }}/portal
    - name: Docker Push rsinitiate
      run: docker push ${{ secrets.DOCKER_HUB_ID }}/mongo-rsinitiate

    - name: Copy deploy script via scp.
      run: scp -oStrictHostKeyChecking=no ${{ github.workspace }}/deploy/docker-compose/docker-compose.yml ${{ secrets.DROPLET_USER}}@${{ secrets.DROPLET_IP }}:/
    - name: Deploy. (Signal cloud hosting via SSH to put new dockers live)
      run: ssh -oStrictHostKeyChecking=no -v ${{ secrets.DROPLET_USER}}@${{ secrets.DROPLET_IP }} 'cd / && export MTN_DB_PATH=${{ secrets.MTN_DB_PATH }} && docker-compose down && docker-compose up -d'
