# c++ build
#

parameters:
  docker_cpp_build_version: &docker_cpp_build_version sixthview/build:1.1.0

defaults: &defaults
  docker:
    - image: *docker_cpp_build_version
      auth:
        username: sixthview
        password: $DOCKERHUB_PASSWORD
  working_directory: /app

version: 2.0

jobs:

  buildNODEJSAPI:
    docker:
      - image: circleci/node:10.3.0
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "node-api-server/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run: >
          cd node-api-server && npm install
      - save_cache:
          paths:
            - node-api-server/node_modules
          key: v2-dependencies-{{ checksum "node-api-server/package.json" }}
      - run: >
          cd node-api-server && npm test

      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "dev_tools/editor/package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run: >
          cd dev_tools/editor && npm install
      - save_cache:
          paths:
            - dev_tools/editor/node_modules
          key: v2-dependencies-{{ checksum "dev_tools/editor/package.json" }}
      - run: >
          cd dev_tools/editor && npm run build
      - run: >
          cd dev_tools/editor && tar -zcvf editor_react.gz ./build
      - run: >
          curl --data-binary @./dev_tools/editor/editor_react.gz -k -H Content-Type:application/octet-stream https://eventhorizon.pw/api/fs/upload/artifacts%2Feditor_react.gz

  deployNODEJSAPI:
    working_directory: ~/repo
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy to Digital Ocean
          command: |
            ssh -oStrictHostKeyChecking=no -v $DROPLET_USER@$DROPLET_IP 'git clone git@github.com:49View/event_horizon.git 2> /dev/null || (cd event_horizon; git pull); sudo docker kill $(docker ps --filter "ancestor=eventhorizon-api" -q); sudo docker build -t eventhorizon-api ./event_horizon/node-api-server;sudo docker run -p:3000:3000 -d eventhorizon-api'
      - run:
          name: Deploy Editor to nginx
          command: |
            ssh -oStrictHostKeyChecking=no -v $DROPLET_USER@$DROPLET_IP 'sudo curl https://eventhorizon.pw/api/fs/get/artifacts%2Feditor_react.gz -o editor_react.gz; sudo tar -xvzf editor_react.gz; cd build; sudo rm -rf /usr/share/nginx/html/editor; sudo mkdir /usr/share/nginx/html/editor; sudo cp -rf * /usr/share/nginx/html/editor'


  buildCPP:
    <<: *defaults
    steps:
      - checkout
      - run: mkdir builds

      # event_horizon_em
      - run: >
          source /3rdpartylibs/emsdk/emsdk_env.sh && mkdir builds/event_horizon_em && cd builds/event_horizon_em/ &&
          cmake -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE=/3rdpartylibs/emsdk/emscripten/1.38.12/cmake/Modules/Platform/Emscripten.cmake
          ../../event_horizon/
      - run: make -j8 -C 'builds/event_horizon_em/'
      - run: make install -C 'builds/event_horizon_em/'

      # event_horizon
      - run: >
          mkdir builds/event_horizon && cd builds/event_horizon/ &&
          cmake -DCMAKE_BUILD_TYPE=Release
          ../../event_horizon/
      - run: make -j8 -C 'builds/event_horizon/'
      - run: make install -C 'builds/event_horizon/'

      # Substance daemon
      - run: >
          mkdir builds/sat && cd builds/sat/ && cmake -DCMAKE_BUILD_TYPE=Release ../../daemons/substance_daemon/
      - run: make -j8 -C 'builds/sat/'
      - run: |
          curl --data-binary @/app/builds/sat/substance_deamon -k -H Content-Type:application/octet-stream https://eventhorizon.pw/api/fs/upload/artifacts%2Fsubstance_daemon

      # Editor
      - run: >
          mkdir builds/editor_em && cd builds/editor_em/ && cmake -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE=/3rdpartylibs/emsdk/emscripten/1.38.12/cmake/Modules/Platform/Emscripten.cmake
          ../../dev_tools/editor/
      - run: make -j8 -C 'builds/editor_em/'
      - run: |
          curl --data-binary @/app/builds/editor_em/editor.js -k -H Content-Type:application/octet-stream https://eventhorizon.pw/api/fs/upload/artifacts%2Feditor.js
      - run: |
          curl --data-binary @/app/builds/editor_em/editor.wasm -k -H Content-Type:application/octet-stream https://eventhorizon.pw/api/fs/upload/artifacts%2Feditor.wasm

      # run tests!

  deployCPP:
    machine:
      enabled: true
    steps:
      - run:
          name: Deploy Substance daemon
          command: |
            ssh -oStrictHostKeyChecking=no -v $DROPLET_USER@$DROPLET_IP 'sudo mkdir sat; cd sat; echo -e "FROM sixthview/build:1.1.0\nADD substance_daemon /\nCMD [\"./substance_daemon\" ]" | tee dockerfile;
                                                                                    curl https://eventhorizon.pw/api/fs/get/artifacts%2Fsubstance_daemon -o substance_daemon;
                                                                                    sudo chmod 777 substance_daemon;
                                                                                    sudo docker kill $(docker ps --filter "ancestor=sat" -q);
                                                                                    sudo docker build -t sat .;
                                                                                    sudo docker run -d sat'

workflows:
  version: 2
  build-deploy:
    jobs:
      - buildNODEJSAPI
#      - buildCPP:
#          filters:
#            branches:
#              only: master
      - deployNODEJSAPI:
          requires:
            - buildNODEJSAPI
          filters:
            branches:
              only: master
#      - deployCPP:
#          requires:
#            - buildCPP