
# SSL client certificate remaps
#
#map $ssl_client_s_dn $ssl_client_s_dn_cn {
#    # default "";
#    ~CN=(?<CN>[^,]+) $CN;
#}

upstream graphql-api {
    server graphql-api:4500;
}

upstream graphql-api-webrtc {
    server graphql-api:6503;
}

upstream portal {
    server portal:3000;
}

server {
    listen 80;
    listen [::]:80 default_server ipv6only=on;

    location / {
        rewrite ^ https://$host$request_uri? permanent;
    }

    #for certbot challenges (renewal process)
    location ~ /.well-known/acme-challenge {
        allow all;
        root /data/letsencrypt;
    }
    
    #return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ssl_protocols TLSv1.2;

    ssl_certificate /etc/nginx/dns-cert.pem;
    ssl_certificate_key /etc/nginx/dns-cert-key.pem;

    # client certificate

    #ssl_client_certificate /etc/nginx/client_certs/ca.crt;
    # make verification optional, so we can display a 403 message to those
    # who fail authentication
    #ssl_verify_client optional;

    location / {
        gzip_static on;
        proxy_pass http://portal;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        proxy_ssl_session_reuse off;
        proxy_set_header Host $http_host;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        client_max_body_size 1000M;
    }

    location /media/ {
        root /media;
    }

    location /gapi/ {
        rewrite /gapi/(.*) /$1  break;
        proxy_pass http://graphql-api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        client_max_body_size 1000M;
    }

    location /sockjs-node/ {
        proxy_pass http://portal;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /webrtc/ {
      proxy_pass http://graphql-api-webrtc;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

}
