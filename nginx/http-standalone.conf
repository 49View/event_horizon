
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    map $ssl_client_s_dn $ssl_client_s_dn_cn {
        # default "";
        ~CN=(?<CN>[^,]+) $CN; 
    }

    #gzip  on;

    server {
        listen 80;
        listen [::]:80 default_server;
        return 301 https://$host$request_uri;
    }

    #
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name  localhost;

        ssl_certificate      /Users/Dado/Documents/49View/event_horizon/nginx/localhost.pem;
        ssl_certificate_key  /Users/Dado/Documents/49View/event_horizon/nginx/localhost-key.pem;

        # client certificate
        ssl_client_certificate /Users/Dado/Documents/49View/certificates/client-certs/ca.crt;
        # make verification optional, so we can display a 403 message to those
        # who fail authentication
        ssl_verify_client optional;

        location / {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_pass http://localhost:3000;
            proxy_ssl_session_reuse off;
            proxy_set_header Host $http_host;
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /api/ {

            # proxy_set_header x_auth_eh "dado";

            # if ( $http_x_auth_eh != 'dado' ) {
            #     return 403;
            # }

            proxy_set_header x_auth_eh $ssl_client_s_dn_cn;

            # if ($ssl_client_verify = SUCCESS) {
            #     proxy_set_header x_auth_eh 'andiamo a berlino';
            # } 

            rewrite ^ $request_uri;
            rewrite /api/(.*) /$1  break;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            proxy_pass http://localhost:4000;
            proxy_ssl_session_reuse off;
            proxy_set_header Host $http_host;
            proxy_cache_bypass $http_upgrade;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            client_max_body_size 1000M;
        }

        location /sockjs-node/ {
            proxy_pass http://localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /wss/ {
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $http_host;
          proxy_set_header X-NginX-Proxy true;
     
          proxy_pass http://localhost:3500;
          proxy_redirect off;
     
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
        }
    }


    include servers/*;
}
